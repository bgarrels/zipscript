#summary Guide for the impatient.
#labels Featured

No dependencies are required so all you have to do is add the zipscript-core jar to your classpath.  There are 3 different ways Zipscript can be used:

==Evaluating static config entries as booleans==
_the default boolean evaluation resource loader assumes the expression is passed to the getEvaluator method: [http://www.zipscript.org/layout/frameset.html?http://www.zipscript.org/docs/current/bk02ch02.html click here for details]_
{{{
String expression = "foo != null && bar > 10"; // get the expression to evaluate
Map context = new HashMap();
// add business data to the context
try {
    Evaluator e = ZipEngine.getInstance().getEvaluator(expression);
    boolean val = e.booleanValue(context);
}
catch (ParseException e) {
// the expression was invalid
}
}}}

==Retrieving runtime objects using static config entries==
_the default object evaluation resource loader assumes the expression is passed to the getEvaluator method: [http://www.zipscript.org/layout/frameset.html?http://www.zipscript.org/docs/current/bk02ch02.html click here for details]_
{{{
String expression = "{foo, bar, baz}"; // get the expression to evaluate - example represents a list
Map context = new HashMap();
// add business data to the context
try {
    Evaluator e = ZipEngine.getInstance().getEvaluator(expression);
    Object obj = e.objectValue(context);
    // in this example obj will be a java.util.List
}
catch (ParseException e) {
// the expression was invalid
}
}}}

==Merging static templates with runtime data==
_the default template resource loader will retrieve the template resource from the classpath: [http://www.zipscript.org/layout/frameset.html?http://www.zipscript.org/docs/current/bk02ch02.html click here for details]_
{{{
String templateName = ... // represents a resource from the classpath by default
Map context = new HashMap();
// add business data to the context
try {
    Template t = ZipEngine.getInstance().getTemplate(templateName);
    // there are other merging options as well
    String result = t.merge(context);
}
catch (ParseException e) {
// the expression was invalid
}
}}}

==Now What?==
There are many other features and functionality not listed here.  To learn more, why not check out the UserGuide and DevelopersGuide.